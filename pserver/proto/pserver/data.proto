syntax = "proto3";
package pserver;

import "delta/delta.proto";

option go_package = "github.com/dave/protod/pserver;pserver";

message Payload {
  message Edit {
    message Request {
        string id = 1;      // document id
        string request = 2; // random unique id for this request
        int64 state = 3;    // state of the document that this op is acting on
        delta.Op op = 4;    // operation
    }
    message Response {
        int64 state = 1;   // state of the document after the op from the client and the response op have been applied
        delta.Op op = 2;   // response op that must be applied to the document in order to get to the server state
    }
  }
  message Add{
    message Request {
      string request = 1;  // random unique id for de-duplication
    }
    message Response {
      string id = 1;
    }
  }
  message Get{
    message Request {
      string id = 1;
    }
    message Response {
      int64 state = 1;
    }
  }
}

// Snapshot is a lazy snapshot of the state of the document at some point in the recent past. It
// is NOT updated on every state change. To get the document in it's latest state, all future
// operations must be applied to this value.
message Snapshot {
  string request = 1; // the random unique request id supplied by the client when creating the document
  int64 state = 2;    // state of this document
  Blob value = 3;     // marshaled protobuf TODO: store externally?
}

// State is a single state change that increments the state counter by one.
message State {
  string request = 1; // the random unique request id supplied by the client
  int64 state = 2;    // state of this document after the this op
  Blob op = 3;        // the operation that was applied to change the state from (state-1)->state
}

message Blob {
  bytes value = 1; // binary value
  // TODO: remember firestore has a 1MB limit on document size
  // TODO: add compression?
  // TODO: add facility to store data externally if over 1mb?
}