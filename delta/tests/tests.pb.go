// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: tests/tests.proto

package tests

import (
	delta "github.com/dave/protod/delta"
	tests2 "github.com/dave/protod/delta/tests2"
	tests3 "github.com/dave/protod/delta/tests2/tests3"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Person_Type int32

const (
	Person_Null    Person_Type = 0
	Person_Alpha   Person_Type = 1
	Person_Bravo   Person_Type = 2
	Person_Charlie Person_Type = 3
)

// Enum value maps for Person_Type.
var (
	Person_Type_name = map[int32]string{
		0: "Null",
		1: "Alpha",
		2: "Bravo",
		3: "Charlie",
	}
	Person_Type_value = map[string]int32{
		"Null":    0,
		"Alpha":   1,
		"Bravo":   2,
		"Charlie": 3,
	}
)

func (x Person_Type) Enum() *Person_Type {
	p := new(Person_Type)
	*p = x
	return p
}

func (x Person_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Person_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_tests_proto_enumTypes[0].Descriptor()
}

func (Person_Type) Type() protoreflect.EnumType {
	return &file_tests_tests_proto_enumTypes[0]
}

func (x Person_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Person_Type.Descriptor instead.
func (Person_Type) EnumDescriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{0, 0}
}

// [proto:data]
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age      uint32                 `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Cases    map[string]*Case       `protobuf:"bytes,4,rep,name=cases,proto3" json:"cases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Company  *Company               `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	Alias    []string               `protobuf:"bytes,6,rep,name=alias,proto3" json:"alias,omitempty"`
	Type     Person_Type            `protobuf:"varint,7,opt,name=type,proto3,enum=tests.Person_Type" json:"type,omitempty"`
	TypeList []Person_Type          `protobuf:"varint,8,rep,packed,name=typeList,proto3,enum=tests.Person_Type" json:"typeList,omitempty"`
	TypeMap  map[string]Person_Type `protobuf:"bytes,9,rep,name=typeMap,proto3" json:"typeMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=tests.Person_Type"`
	Embedded *Person_Embed          `protobuf:"bytes,10,opt,name=embedded,proto3" json:"embedded,omitempty"`
	// Types that are assignable to Choice:
	//	*Person_Str
	//	*Person_Dbl
	//	*Person_Itm
	//	*Person_Cas
	//	*Person_Cho
	Choice isPerson_Choice      `protobuf_oneof:"choice"`
	House  *House               `protobuf:"bytes,16,opt,name=house,proto3" json:"house,omitempty"`
	Shirt  *tests2.Shirt        `protobuf:"bytes,17,opt,name=shirt,proto3" json:"shirt,omitempty"`
	Pants  *tests3.Pants        `protobuf:"bytes,18,opt,name=pants,proto3" json:"pants,omitempty"`
	Double *Person_Embed_Double `protobuf:"bytes,19,opt,name=double,proto3" json:"double,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{0}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Person) GetCases() map[string]*Case {
	if x != nil {
		return x.Cases
	}
	return nil
}

func (x *Person) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *Person) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Person) GetType() Person_Type {
	if x != nil {
		return x.Type
	}
	return Person_Null
}

func (x *Person) GetTypeList() []Person_Type {
	if x != nil {
		return x.TypeList
	}
	return nil
}

func (x *Person) GetTypeMap() map[string]Person_Type {
	if x != nil {
		return x.TypeMap
	}
	return nil
}

func (x *Person) GetEmbedded() *Person_Embed {
	if x != nil {
		return x.Embedded
	}
	return nil
}

func (m *Person) GetChoice() isPerson_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Person) GetStr() string {
	if x, ok := x.GetChoice().(*Person_Str); ok {
		return x.Str
	}
	return ""
}

func (x *Person) GetDbl() float64 {
	if x, ok := x.GetChoice().(*Person_Dbl); ok {
		return x.Dbl
	}
	return 0
}

func (x *Person) GetItm() *Item {
	if x, ok := x.GetChoice().(*Person_Itm); ok {
		return x.Itm
	}
	return nil
}

func (x *Person) GetCas() *Case {
	if x, ok := x.GetChoice().(*Person_Cas); ok {
		return x.Cas
	}
	return nil
}

func (x *Person) GetCho() *Chooser {
	if x, ok := x.GetChoice().(*Person_Cho); ok {
		return x.Cho
	}
	return nil
}

func (x *Person) GetHouse() *House {
	if x != nil {
		return x.House
	}
	return nil
}

func (x *Person) GetShirt() *tests2.Shirt {
	if x != nil {
		return x.Shirt
	}
	return nil
}

func (x *Person) GetPants() *tests3.Pants {
	if x != nil {
		return x.Pants
	}
	return nil
}

func (x *Person) GetDouble() *Person_Embed_Double {
	if x != nil {
		return x.Double
	}
	return nil
}

type isPerson_Choice interface {
	isPerson_Choice()
}

type Person_Str struct {
	Str string `protobuf:"bytes,11,opt,name=str,proto3,oneof"`
}

type Person_Dbl struct {
	Dbl float64 `protobuf:"fixed64,12,opt,name=dbl,proto3,oneof"`
}

type Person_Itm struct {
	Itm *Item `protobuf:"bytes,13,opt,name=itm,proto3,oneof"`
}

type Person_Cas struct {
	Cas *Case `protobuf:"bytes,14,opt,name=cas,proto3,oneof"`
}

type Person_Cho struct {
	Cho *Chooser `protobuf:"bytes,15,opt,name=cho,proto3,oneof"`
}

func (*Person_Str) isPerson_Choice() {}

func (*Person_Dbl) isPerson_Choice() {}

func (*Person_Itm) isPerson_Choice() {}

func (*Person_Cas) isPerson_Choice() {}

func (*Person_Cho) isPerson_Choice() {}

// [proto:data]
type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string           `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Revenue float32          `protobuf:"fixed32,12,opt,name=revenue,proto3" json:"revenue,omitempty"`
	Flags   map[int64]string `protobuf:"bytes,13,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ceo     *Person          `protobuf:"bytes,14,opt,name=ceo,proto3" json:"ceo,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{1}
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetRevenue() float32 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *Company) GetFlags() map[int64]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Company) GetCeo() *Person {
	if x != nil {
		return x.Ceo
	}
	return nil
}

// [proto:data]
type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string           `protobuf:"bytes,21,opt,name=name,proto3" json:"name,omitempty"`
	Items []*Item          `protobuf:"bytes,22,rep,name=items,proto3" json:"items,omitempty"`
	Flags map[int64]string `protobuf:"bytes,23,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Case) Reset() {
	*x = Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{2}
}

func (x *Case) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Case) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Case) GetFlags() map[int64]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

// [proto:data]
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string   `protobuf:"bytes,31,opt,name=title,proto3" json:"title,omitempty"`
	Done  bool     `protobuf:"varint,34,opt,name=done,proto3" json:"done,omitempty"`
	Flags []string `protobuf:"bytes,35,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{3}
}

func (x *Item) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Item) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *Item) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

// [proto:data]
type Chooser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Chooser_Str
	//	*Chooser_Dbl
	//	*Chooser_Itm
	Choice isChooser_Choice `protobuf_oneof:"choice"`
}

func (x *Chooser) Reset() {
	*x = Chooser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chooser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chooser) ProtoMessage() {}

func (x *Chooser) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chooser.ProtoReflect.Descriptor instead.
func (*Chooser) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{4}
}

func (m *Chooser) GetChoice() isChooser_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Chooser) GetStr() string {
	if x, ok := x.GetChoice().(*Chooser_Str); ok {
		return x.Str
	}
	return ""
}

func (x *Chooser) GetDbl() float64 {
	if x, ok := x.GetChoice().(*Chooser_Dbl); ok {
		return x.Dbl
	}
	return 0
}

func (x *Chooser) GetItm() *Item {
	if x, ok := x.GetChoice().(*Chooser_Itm); ok {
		return x.Itm
	}
	return nil
}

type isChooser_Choice interface {
	isChooser_Choice()
}

type Chooser_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}

type Chooser_Dbl struct {
	Dbl float64 `protobuf:"fixed64,2,opt,name=dbl,proto3,oneof"`
}

type Chooser_Itm struct {
	Itm *Item `protobuf:"bytes,3,opt,name=itm,proto3,oneof"`
}

func (*Chooser_Str) isChooser_Choice() {}

func (*Chooser_Dbl) isChooser_Choice() {}

func (*Chooser_Itm) isChooser_Choice() {}

type ApplyTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Solo     bool      `protobuf:"varint,1,opt,name=solo,proto3" json:"solo,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Op       *delta.Op `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
	Data     *any.Any  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Expected *any.Any  `protobuf:"bytes,5,opt,name=expected,proto3" json:"expected,omitempty"`
}

func (x *ApplyTestCase) Reset() {
	*x = ApplyTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTestCase) ProtoMessage() {}

func (x *ApplyTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTestCase.ProtoReflect.Descriptor instead.
func (*ApplyTestCase) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyTestCase) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

func (x *ApplyTestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplyTestCase) GetOp() *delta.Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *ApplyTestCase) GetData() *any.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApplyTestCase) GetExpected() *any.Any {
	if x != nil {
		return x.Expected
	}
	return nil
}

type TransformTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Solo      bool      `protobuf:"varint,1,opt,name=solo,proto3" json:"solo,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Op1       *delta.Op `protobuf:"bytes,3,opt,name=op1,proto3" json:"op1,omitempty"`
	Op2       *delta.Op `protobuf:"bytes,4,opt,name=op2,proto3" json:"op2,omitempty"`
	Data      *any.Any  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Expected  *any.Any  `protobuf:"bytes,6,opt,name=expected,proto3" json:"expected,omitempty"`
	Expected1 *any.Any  `protobuf:"bytes,7,opt,name=expected1,proto3" json:"expected1,omitempty"`
	Expected2 *any.Any  `protobuf:"bytes,8,opt,name=expected2,proto3" json:"expected2,omitempty"`
}

func (x *TransformTestCase) Reset() {
	*x = TransformTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformTestCase) ProtoMessage() {}

func (x *TransformTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformTestCase.ProtoReflect.Descriptor instead.
func (*TransformTestCase) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{6}
}

func (x *TransformTestCase) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

func (x *TransformTestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransformTestCase) GetOp1() *delta.Op {
	if x != nil {
		return x.Op1
	}
	return nil
}

func (x *TransformTestCase) GetOp2() *delta.Op {
	if x != nil {
		return x.Op2
	}
	return nil
}

func (x *TransformTestCase) GetData() *any.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransformTestCase) GetExpected() *any.Any {
	if x != nil {
		return x.Expected
	}
	return nil
}

func (x *TransformTestCase) GetExpected1() *any.Any {
	if x != nil {
		return x.Expected1
	}
	return nil
}

func (x *TransformTestCase) GetExpected2() *any.Any {
	if x != nil {
		return x.Expected2
	}
	return nil
}

type RandomTestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       *delta.Op `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	Expected *Person   `protobuf:"bytes,2,opt,name=expected,proto3" json:"expected,omitempty"`
}

func (x *RandomTestItem) Reset() {
	*x = RandomTestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomTestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomTestItem) ProtoMessage() {}

func (x *RandomTestItem) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomTestItem.ProtoReflect.Descriptor instead.
func (*RandomTestItem) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{7}
}

func (x *RandomTestItem) GetOp() *delta.Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *RandomTestItem) GetExpected() *Person {
	if x != nil {
		return x.Expected
	}
	return nil
}

type ReduceTestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *Person   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Op1     *delta.Op `protobuf:"bytes,2,opt,name=op1,proto3" json:"op1,omitempty"`
	Op2     *delta.Op `protobuf:"bytes,3,opt,name=op2,proto3" json:"op2,omitempty"`
	Reduced *delta.Op `protobuf:"bytes,4,opt,name=reduced,proto3" json:"reduced,omitempty"`
}

func (x *ReduceTestItem) Reset() {
	*x = ReduceTestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReduceTestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceTestItem) ProtoMessage() {}

func (x *ReduceTestItem) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceTestItem.ProtoReflect.Descriptor instead.
func (*ReduceTestItem) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{8}
}

func (x *ReduceTestItem) GetData() *Person {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReduceTestItem) GetOp1() *delta.Op {
	if x != nil {
		return x.Op1
	}
	return nil
}

func (x *ReduceTestItem) GetOp2() *delta.Op {
	if x != nil {
		return x.Op2
	}
	return nil
}

func (x *ReduceTestItem) GetReduced() *delta.Op {
	if x != nil {
		return x.Reduced
	}
	return nil
}

type Person_Embed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Person_Embed) Reset() {
	*x = Person_Embed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person_Embed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person_Embed) ProtoMessage() {}

func (x *Person_Embed) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person_Embed.ProtoReflect.Descriptor instead.
func (*Person_Embed) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Person_Embed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Person_Embed_Double struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Foo:
	//	*Person_Embed_Double_Bar
	//	*Person_Embed_Double_Baz
	Foo isPerson_Embed_Double_Foo `protobuf_oneof:"foo"`
}

func (x *Person_Embed_Double) Reset() {
	*x = Person_Embed_Double{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_tests_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person_Embed_Double) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person_Embed_Double) ProtoMessage() {}

func (x *Person_Embed_Double) ProtoReflect() protoreflect.Message {
	mi := &file_tests_tests_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person_Embed_Double.ProtoReflect.Descriptor instead.
func (*Person_Embed_Double) Descriptor() ([]byte, []int) {
	return file_tests_tests_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Person_Embed_Double) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Person_Embed_Double) GetFoo() isPerson_Embed_Double_Foo {
	if m != nil {
		return m.Foo
	}
	return nil
}

func (x *Person_Embed_Double) GetBar() string {
	if x, ok := x.GetFoo().(*Person_Embed_Double_Bar); ok {
		return x.Bar
	}
	return ""
}

func (x *Person_Embed_Double) GetBaz() int64 {
	if x, ok := x.GetFoo().(*Person_Embed_Double_Baz); ok {
		return x.Baz
	}
	return 0
}

type isPerson_Embed_Double_Foo interface {
	isPerson_Embed_Double_Foo()
}

type Person_Embed_Double_Bar struct {
	Bar string `protobuf:"bytes,2,opt,name=bar,proto3,oneof"`
}

type Person_Embed_Double_Baz struct {
	Baz int64 `protobuf:"varint,3,opt,name=baz,proto3,oneof"`
}

func (*Person_Embed_Double_Bar) isPerson_Embed_Double_Foo() {}

func (*Person_Embed_Double_Baz) isPerson_Embed_Double_Foo() {}

var File_tests_tests_proto protoreflect.FileDescriptor

var file_tests_tests_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x73, 0x32, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x32, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x33, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x07, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x08, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x64,
	0x62, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x64, 0x62, 0x6c, 0x12,
	0x1f, 0x0a, 0x03, 0x69, 0x74, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x69, 0x74, 0x6d,
	0x12, 0x1f, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x61,
	0x73, 0x12, 0x22, 0x0a, 0x03, 0x63, 0x68, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x03, 0x63, 0x68, 0x6f, 0x12, 0x22, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x68, 0x69,
	0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x32, 0x2e, 0x53, 0x68, 0x69, 0x72, 0x74, 0x52, 0x05, 0x73, 0x68, 0x69, 0x72, 0x74, 0x12, 0x23,
	0x0a, 0x05, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x33, 0x2e, 0x50, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x1a, 0x68, 0x0a, 0x05, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x4b, 0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x62, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x62, 0x61, 0x7a, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x62, 0x61, 0x7a, 0x42, 0x05, 0x0a, 0x03, 0x66, 0x6f,
	0x6f, 0x1a, 0x45, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x76, 0x6f, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x10, 0x03, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x65, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x03,
	0x63, 0x65, 0x6f, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01,
	0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x5c, 0x0a,
	0x07, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x03,
	0x64, 0x62, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x64, 0x62, 0x6c,
	0x12, 0x1f, 0x0a, 0x03, 0x69, 0x74, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x69, 0x74,
	0x6d, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0d,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xb9, 0x02, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x70,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e,
	0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x31, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x70, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x52,
	0x03, 0x6f, 0x70, 0x32, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x31, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x31, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0x22, 0x56, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f,
	0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x92, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x70, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x52, 0x03,
	0x6f, 0x70, 0x31, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x70, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x32,
	0x12, 0x23, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x52, 0x07, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x2f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3b, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_tests_proto_rawDescOnce sync.Once
	file_tests_tests_proto_rawDescData = file_tests_tests_proto_rawDesc
)

func file_tests_tests_proto_rawDescGZIP() []byte {
	file_tests_tests_proto_rawDescOnce.Do(func() {
		file_tests_tests_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_tests_proto_rawDescData)
	})
	return file_tests_tests_proto_rawDescData
}

var file_tests_tests_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tests_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_tests_tests_proto_goTypes = []interface{}{
	(Person_Type)(0),            // 0: tests.Person.Type
	(*Person)(nil),              // 1: tests.Person
	(*Company)(nil),             // 2: tests.Company
	(*Case)(nil),                // 3: tests.Case
	(*Item)(nil),                // 4: tests.Item
	(*Chooser)(nil),             // 5: tests.Chooser
	(*ApplyTestCase)(nil),       // 6: tests.ApplyTestCase
	(*TransformTestCase)(nil),   // 7: tests.TransformTestCase
	(*RandomTestItem)(nil),      // 8: tests.RandomTestItem
	(*ReduceTestItem)(nil),      // 9: tests.ReduceTestItem
	(*Person_Embed)(nil),        // 10: tests.Person.Embed
	nil,                         // 11: tests.Person.CasesEntry
	nil,                         // 12: tests.Person.TypeMapEntry
	(*Person_Embed_Double)(nil), // 13: tests.Person.Embed.Double
	nil,                         // 14: tests.Company.FlagsEntry
	nil,                         // 15: tests.Case.FlagsEntry
	(*House)(nil),               // 16: tests.House
	(*tests2.Shirt)(nil),        // 17: tests2.Shirt
	(*tests3.Pants)(nil),        // 18: tests3.Pants
	(*delta.Op)(nil),            // 19: delta.Op
	(*any.Any)(nil),             // 20: google.protobuf.Any
}
var file_tests_tests_proto_depIdxs = []int32{
	11, // 0: tests.Person.cases:type_name -> tests.Person.CasesEntry
	2,  // 1: tests.Person.company:type_name -> tests.Company
	0,  // 2: tests.Person.type:type_name -> tests.Person.Type
	0,  // 3: tests.Person.typeList:type_name -> tests.Person.Type
	12, // 4: tests.Person.typeMap:type_name -> tests.Person.TypeMapEntry
	10, // 5: tests.Person.embedded:type_name -> tests.Person.Embed
	4,  // 6: tests.Person.itm:type_name -> tests.Item
	3,  // 7: tests.Person.cas:type_name -> tests.Case
	5,  // 8: tests.Person.cho:type_name -> tests.Chooser
	16, // 9: tests.Person.house:type_name -> tests.House
	17, // 10: tests.Person.shirt:type_name -> tests2.Shirt
	18, // 11: tests.Person.pants:type_name -> tests3.Pants
	13, // 12: tests.Person.double:type_name -> tests.Person.Embed.Double
	14, // 13: tests.Company.flags:type_name -> tests.Company.FlagsEntry
	1,  // 14: tests.Company.ceo:type_name -> tests.Person
	4,  // 15: tests.Case.items:type_name -> tests.Item
	15, // 16: tests.Case.flags:type_name -> tests.Case.FlagsEntry
	4,  // 17: tests.Chooser.itm:type_name -> tests.Item
	19, // 18: tests.ApplyTestCase.op:type_name -> delta.Op
	20, // 19: tests.ApplyTestCase.data:type_name -> google.protobuf.Any
	20, // 20: tests.ApplyTestCase.expected:type_name -> google.protobuf.Any
	19, // 21: tests.TransformTestCase.op1:type_name -> delta.Op
	19, // 22: tests.TransformTestCase.op2:type_name -> delta.Op
	20, // 23: tests.TransformTestCase.data:type_name -> google.protobuf.Any
	20, // 24: tests.TransformTestCase.expected:type_name -> google.protobuf.Any
	20, // 25: tests.TransformTestCase.expected1:type_name -> google.protobuf.Any
	20, // 26: tests.TransformTestCase.expected2:type_name -> google.protobuf.Any
	19, // 27: tests.RandomTestItem.op:type_name -> delta.Op
	1,  // 28: tests.RandomTestItem.expected:type_name -> tests.Person
	1,  // 29: tests.ReduceTestItem.data:type_name -> tests.Person
	19, // 30: tests.ReduceTestItem.op1:type_name -> delta.Op
	19, // 31: tests.ReduceTestItem.op2:type_name -> delta.Op
	19, // 32: tests.ReduceTestItem.reduced:type_name -> delta.Op
	3,  // 33: tests.Person.CasesEntry.value:type_name -> tests.Case
	0,  // 34: tests.Person.TypeMapEntry.value:type_name -> tests.Person.Type
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_tests_tests_proto_init() }
func file_tests_tests_proto_init() {
	if File_tests_tests_proto != nil {
		return
	}
	file_tests_tests1_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tests_tests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chooser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomTestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReduceTestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person_Embed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_tests_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person_Embed_Double); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tests_tests_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Person_Str)(nil),
		(*Person_Dbl)(nil),
		(*Person_Itm)(nil),
		(*Person_Cas)(nil),
		(*Person_Cho)(nil),
	}
	file_tests_tests_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Chooser_Str)(nil),
		(*Chooser_Dbl)(nil),
		(*Chooser_Itm)(nil),
	}
	file_tests_tests_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Person_Embed_Double_Bar)(nil),
		(*Person_Embed_Double_Baz)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_tests_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_tests_proto_goTypes,
		DependencyIndexes: file_tests_tests_proto_depIdxs,
		EnumInfos:         file_tests_tests_proto_enumTypes,
		MessageInfos:      file_tests_tests_proto_msgTypes,
	}.Build()
	File_tests_tests_proto = out.File
	file_tests_tests_proto_rawDesc = nil
	file_tests_tests_proto_goTypes = nil
	file_tests_tests_proto_depIdxs = nil
}
